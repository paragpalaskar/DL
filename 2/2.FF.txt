import tensorflow as tf
from tensorflow import keras

 #   IMPORTING LIBARARIES
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random

# 1. LOAD AND PREPARING THE DATA
mnist = tf.keras.datasets.mnist

(x_train, y_train),(x_test,y_test) = mnist.load_data()
len(x_train)
len(x_test)

x_train.shape
x_test.shape

x_train[0]

plt.matshow(x_train[0])

x_train = x_train/255
x_test = x_test/255

x_train[0]

# 2. DEFINE THE NETWORK ARCHITECTURE
model=keras.Sequential([
    keras.layers.Flatten(input_shape = (28,28)),
    keras.layers.Dense(128,activation = 'relu'),
    keras.layers.Dense(10,activation = 'softmax')])

model.summary()

#3. COMPILE THE MODEL
model.compile(optimizer = 'sgd',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

# 4. TRAIN THE MODEL
history = model.fit(x_train, y_train, validation_data = (x_test,y_test), epochs = 10)

#  5. EVALUATE THE MODEL
test_loss,test_acc = model.evaluate(x_test, y_test)
print("loss=%.3f" %test_loss)
print("Accuracy =%.3f" %test_acc)


# 6. MAKE PREDICTION ON NEW DATA
n = random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()

predicted_value = model.predict(x_test)
print( "handwritten image is = %d"%np.argmax(predicted_value[n]))


# 7. PLOT ACCURACY AND LOSS GRAPH
history.history.keys()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model_accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train, validation'], loc = 'upper left')
plt.show()


plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model_loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train, validation'], loc = 'upper left')
plt.show()

